/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/heroModel.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useHelper, useTexture } from '@react-three/drei'
import { gsap } from 'gsap'
import { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper'
import { useControls } from 'leva'
import * as THREE from 'three'


export function HeroModel(props) {
  const { nodes, materials } = useGLTF('/models/heroModel.glb')
  const rectLight = useRef();
  const chairURef = useRef()

  const texture = useTexture('/textures/heroTenture.png', (texture) => {
    texture.flipY = false
  })

  // CHAIR GSAP
  useEffect(() => {
    if (chairURef.current) {
      gsap.to(chairURef.current.rotation, {
        y: 0.5,       // 最大旋转角度（弧度）
        duration: 2,
        repeat: -1,    // 无限重复
        yoyo: true,    // 往返动画
        ease: 'sine.inOut'
      })
    }
  }, [])

  useHelper(rectLight, RectAreaLightHelper, "pink");

  const { lightIns, lightColor, lightAngle, lightDistance } = useControls('light', {
    lightDistance: { value: 10, min: 0, max: 100, step: 1 },
    lightAngle: { value: 0, min: -Math.PI, max: Math.PI, step: Math.PI / 365 },
    lightIns: { value: 30, min: 0, max: 200, step: 1 },
    lightColor: '#f5fff5'
  })
  useEffect(() => {
    if (!nodes.tableLight || !rectLight.current) return

    // 更新世界矩阵（确保 transform 正确）
    nodes.tableLight.updateWorldMatrix(true, false)

    const light = rectLight.current
    // 获取世界位置和旋转
    nodes.tableLight.getWorldPosition(light.position)
    nodes.tableLight.getWorldQuaternion(light.quaternion)
    light.rotation.x = -Math.PI / 2
    light.rotation.y = lightAngle
    // 你也可以选择设置方向朝某一点（例如 lookAt）
    // light.lookAt(0, 0, 0)

    light.width = 0.12
    light.height = 2.8

    // 设置其他参数
    light.intensity = lightIns
    light.color = new THREE.Color(lightColor)

  }, [nodes, lightIns, lightColor, lightAngle, lightDistance])


  return (
    <group {...props} dispose={null}>
      {/* CHAIR */}
      <mesh
        ref={chairURef}
        geometry={nodes.chairU.geometry} material={nodes.chairU.material} position={[-0.383, 0.702, -0.704]}>

        <meshStandardMaterial map={texture} />
      </mesh>
      <mesh geometry={nodes.chairD.geometry} material={nodes.chairD.material} >
        <meshStandardMaterial map={texture} />
      </mesh>

      {/* LIGHT */}
      <mesh geometry={nodes.tableLight.geometry} material={nodes.tableLight.material} position={[-1.751, 2.809, -0.406]} />
      <rectAreaLight
        ref={rectLight}
        color={lightColor}
        intensity={lightIns}
        penumbra={1}
        castShadow
      />

      {/* HOUSE */}
      <mesh geometry={nodes.house.geometry} material={nodes.house.material} >
        <meshStandardMaterial map={texture} />
      </mesh>
      {/* FLASH */}
      <mesh geometry={nodes.flash.geometry} material={nodes.flash.material} position={[-2.124, 1.123, 2.009]} >
        <meshStandardMaterial color="yellow"
          emissive="yellow"
          emissiveIntensity={1} // 强度可调
          emissiveMap={texture}
        />
      </mesh>
      {/* Screen */}
      <mesh geometry={nodes.computer_screen.geometry} material={nodes.computer_screen.material} position={[-1.718, 1.536, -0.746]} />

    </group>
  )
}

useGLTF.preload('/models/heroModel.glb')
