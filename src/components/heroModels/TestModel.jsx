/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/test.glb 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { gsap } from 'gsap'

export function TestModel(props) {
  const { nodes, materials } = useGLTF('/models/test.glb')

  const testref1 = useRef()
  const testref2 = useRef()
  const handleClick = (axis = 'z', ref) => {
    if (!ref?.current) return
    const rotation = ref.current.rotation
    const startValue = rotation[axis]
    const endValue = startValue + Math.PI * 4

    gsap.to(rotation, {
      [axis]: endValue,
      duration: 2,
      ease: 'power2.inOut',
    })
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={testref1}
        onClick={(e) => {
          e.stopPropagation()
          handleClick('z', testref1)
        }}
        // onPointerEnter={handleClick}
        geometry={nodes.平面.geometry} material={nodes.平面.material} />
      <mesh
        ref={testref2}
        onClick={(e) => {
          console.log('clicked', e)
          e.stopPropagation()
          handleClick('x', testref2)
        }}
        geometry={nodes.平面002.geometry} material={nodes.平面002.material} position={[-0.62, 0.216, -0.829]} />
    </group>
  )
}

useGLTF.preload('/models/test.glb')
